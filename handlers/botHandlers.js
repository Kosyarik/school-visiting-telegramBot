const classesConfig = require('../config/classes.json');
const GoogleSheetsService = require('../services/googleSheets.js');
const { Markup } = require('telegraf');

const sheetsService = new GoogleSheetsService();

const setupHandlers = (bot) => {
  const getClassMenu = () => {
    const classes = classesConfig.classes;
    const buttons = [];
    const columns = 3;

    for (let i = 0; i < classes.length; i += columns) {
      const row = classes.slice(i, i + columns);
      buttons.push(row);
    }
    return Markup.keyboard(buttons).resize();
  };

  bot.start((ctx) => {
    ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –Ω–∏–∂—á–µ:', getClassMenu());
  });

  bot.command('getid', (ctx) => {
    ctx.reply(`–í–∞—à chatId: ${ctx.chat.id}`);
  });

  classesConfig.classes.forEach(cls => {
    bot.hears(cls, (ctx) => {
      ctx.session = { chatId: ctx.chat.id, class: cls };
      ctx.reply('–û–±–µ—Ä—ñ—Ç—å:', Markup.keyboard([
        ['–¶—ñ–ª–∏–π –∫–ª–∞—Å', '–ì—Ä—É–ø–∞'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
      ]).resize());
    });
  });

  bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => {
    ctx.session = { chatId: ctx.chat.id };
    ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å:', getClassMenu());
  });

  bot.hears(['–¶—ñ–ª–∏–π –∫–ª–∞—Å', '–ì—Ä—É–ø–∞'], (ctx) => {
    if (!ctx.session?.class) return;
    
    ctx.session.type = ctx.message.text === '–¶—ñ–ª–∏–π –∫–ª–∞—Å' ? 'whole' : 'group';
    ctx.reply('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–Ω—ñ–≤:', Markup.keyboard([
      ['1', '2', '3'],
      ['4', '5', '6'],
      ['7', '8', '9'],
      ['0', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]).resize());
  });

  bot.on('text', async (ctx) => {
    if (ctx.chat.id !== ctx.session?.chatId) return;

    if (!ctx.session?.class || !ctx.session?.type) {
      return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å —ñ —Ç–∏–ø!', getClassMenu());
    }

    if (ctx.message.text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
      ctx.session = { chatId: ctx.chat.id, class: ctx.session.class };
      return ctx.reply('–û–±–µ—Ä—ñ—Ç—å:', Markup.keyboard([
        ['–¶—ñ–ª–∏–π –∫–ª–∞—Å', '–ì—Ä—É–ø–∞'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
      ]).resize());
    }
    
    const count = parseInt(ctx.message.text);
    if (isNaN(count) || count < 0 || count > process.env.MAX_ABSENT_STUDENT) {
      return ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!');
    }

    try {
      const today = new Date().toISOString().split('T')[0];
      await sheetsService.updateSheet(
        ctx.session.class,
        today,
        count,
        ctx.session.type === 'group'
      );
      ctx.reply('üî•üî•üî• –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ! üî•üî•üî•', getClassMenu());

      const allFilled  = await sheetsService.areAllClassesFilled(today);
      const kuratorIds = classesConfig.kurators[ctx.session.class];

      if (kuratorIds && Array.isArray(kuratorIds)) {
        for (const kuratorId of kuratorIds) {
        await ctx.telegram.sendMessage(
          kuratorId,
          `üì¢–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª–∞—Å—É ${ctx.session.class} –Ω–∞ ${today}\n üì¢` +
          `–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö: ${count}, –¢–∏–ø: ${ctx.session.type === 'group' ? '–ì—Ä—É–ø–∞' : '–¶—ñ–ª–∏–π –∫–ª–∞—Å'}`
        );
      }
      } else {
        console.log(`–ö—É—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–ª–∞—Å—É ${className} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
      }

      if(allFilled) {
        const sum  = await sheetsService.sumAllClasses(today);
        const adminChatIds = classesConfig.adminChatIds;
        for (const adminChatId of adminChatIds) {
        await ctx.telegram.sendMessage(
          adminChatId,
          `üì¢ –£—Å—ñ –∫–ª–∞—Å–∏ –∑–∞ ${today} –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!\n` +
          `–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —É—á–Ω—ñ–≤: ${sum}`
        );
      }
      }
    } catch (error) {
      ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –¥–∞–Ω–∏—Ö: ' + error.message);
    }

    ctx.session = { chatId: ctx.chat.id };
  });
};

module.exports = { setupHandlers };
