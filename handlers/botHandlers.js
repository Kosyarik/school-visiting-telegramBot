const classesConfig = require('../config/classes.json');
const GoogleSheetsService = require('../services/googleSheets.js');
const { Markup } = require('telegraf');

const sheetsService = new GoogleSheetsService();

const setupHandlers = (bot) => {
  const showClassMenu = (ctx) => {
    const classes = classesConfig.classes;
    const buttons = [];
    const columns = 3;

    for (let i = 0; i < classes.length; i += columns) {
      const row = classes.slice(i, i + columns).map(cls =>
        Markup.button.callback(cls, `class_${cls}`)
      );
      buttons.push(row);
    }

    ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å:', Markup.inlineKeyboard(buttons));
  };

  bot.start((ctx) => {
    ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –Ω–∏–∂—á–µ:'
  ).then(() => showClassMenu(ctx));
  });

  classesConfig.classes.forEach(cls => {
    bot.action(`class_${cls}`, (ctx) => {
      ctx.session = { class: cls };
      ctx.reply('–û–±–µ—Ä—ñ—Ç—å:', Markup.inlineKeyboard([
        [Markup.button.callback('–¶—ñ–ª–∏–π –∫–ª–∞—Å', `type_whole_${cls}`)],
        [Markup.button.callback('–ì—Ä—É–ø–∞', `type_group_${cls}`)],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_classes')]
      ]));
    });
  });

  bot.action('back_to_classes', (ctx) => {
    ctx.session = {};
    showClassMenu(ctx);
  });

  bot.action(/type_(whole|group)_(.+)/, (ctx) => {
    const type = ctx.match[1];
    const className = ctx.match[2];
    ctx.session = { class: className, type: type === 'whole' ? 'whole' : 'group' };
    ctx.reply('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–Ω—ñ–≤:‚¨áÔ∏è ‚¨áÔ∏è ‚¨áÔ∏è ');
  });

  bot.on('text', async (ctx) => {
    if (!ctx.session?.class || !ctx.session?.type) {
      return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å —ñ —Ç–∏–ø!');
    }

    const count = parseInt(ctx.message.text);
    if (isNaN(count) || count < 0 || count > process.env.MAX_ABSENT_STUDENT) {
      return ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!', Markup.inlineKeyboard([
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `class_${ctx.session.class}`)]
      ]));
    }

    try {
      const today = new Date().toISOString().split('T')[0];
      await sheetsService.updateSheet(
        ctx.session.class,
        today,
        count,
        ctx.session.type === 'group'
      );
      ctx.reply('üî•üî•üî•–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ!üî•üî•üî•').then(() => showClassMenu(ctx));
    } catch (error) {
      ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –¥–∞–Ω–∏—Ö: ' + error.message, Markup.inlineKeyboard([
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `class_${ctx.session.class}`)]
      ]));
    }

    ctx.session = {};
  });
};

module.exports = { setupHandlers };